"""
Multi-Agent System for AI News Summary Generation

This module implements a comprehensive multi-agent system that coordinates the discovery,
analysis, and summarization of recent AI news for technology leadership audiences.

The system consists of four specialized agents:
1. Research Agent (ai_news_researcher) - Finds and evaluates recent AI news
2. Analysis Agent (content_analyzer) - Extracts structured insights from articles  
3. Writing Agent (executive_writer) - Creates polished summaries for tech leaders
4. Orchestration Agent (workflow_orchestrator) - Coordinates the entire workflow

Authors: Generated by OpenAI Agents SDK
"""

import asyncio
import datetime
import os
import sys
from typing import Dict, List, Optional

from dotenv import load_dotenv
from agents import Agent, Runner, WebSearchTool, trace

# Load environment variables
load_dotenv()


class AINewsResearcher:
    """Factory class for creating the AI News Research Agent."""

    @staticmethod
    def create_agent() -> Agent:
        """
        Create and configure the AI News Research Agent.

        Returns:
            Agent: Configured research agent for finding recent AI news.

        Raises:
            ValueError: If required environment variables are missing.
        """
        return Agent(
            name="ai_news_researcher",
            instructions="""You are the AI News Research Agent. Your role is to find and evaluate recent AI news stories.

TASK: Find the most significant AI news story published within the last 7 days.

PROCESS:
1. Search for AI news articles published in the last 7 days using web search
2. Evaluate articles based on these criteria:
   - Relevance to AI/ML technology developments
   - Impact on business or technology landscape
   - Credibility of source (prioritize: TechCrunch, VentureBeat, MIT Technology Review, Wired, Reuters, Bloomberg, etc.)
   - Recency (prefer more recent within the 7-day window)
3. Select the single most significant story
4. Verify the article is substantial enough for a 500-word summary

OUTPUT FORMAT:
- Article title
- Publication date
- Source/publication name
- Article URL
- Brief 2-sentence justification for selection
- Full article text or comprehensive summary of content

CONSTRAINTS:
- Only select articles from the last 7 days
- Prioritize breakthrough announcements, major funding rounds, significant product launches, or industry-changing developments
- Avoid opinion pieces or speculative articles
- Ensure selected article has sufficient depth for detailed analysis""",
            model="gpt-4o",
            tools=[
                WebSearchTool(
                    num_results=10,
                    safe_search=True,
                    time_range="week"  # Focus on recent content
                )
            ],
            handoff_description="Handoff to research agent for finding and evaluating recent AI news stories."
        )


class ContentAnalyzer:
    """Factory class for creating the Content Analysis Agent."""

    @staticmethod
    def create_agent() -> Agent:
        """
        Create and configure the Content Analysis Agent.

        Returns:
            Agent: Configured analysis agent for extracting structured insights.

        Raises:
            ValueError: If required environment variables are missing.
        """
        return Agent(
            name="content_analyzer",
            instructions="""You are the Content Analysis Agent. Your role is to extract and structure key information from AI news articles.

TASK: Analyze the provided AI news article and extract structured insights for summary writing.

PROCESS:
1. Read the entire article thoroughly
2. Identify and extract:
   - Main development or announcement
   - Key companies/organizations involved
   - Technical details and implications
   - Business impact and market significance
   - Timeline and future implications
   - Quotes from key stakeholders
3. Organize information by importance for technology leaders
4. Identify the "so what" factor - why this matters to tech executives

OUTPUT FORMAT:
- **Headline Development:** [One sentence describing the main news]
- **Key Players:** [Companies, people, organizations involved]
- **Technical Details:** [Technical aspects explained in business terms]
- **Business Implications:** [Impact on industry, markets, competition]
- **Strategic Significance:** [Why tech leaders should care]
- **Timeline/Next Steps:** [What happens next, when]
- **Notable Quotes:** [2-3 most impactful quotes with attribution]
- **Executive Summary Points:** [5-7 bullet points for leadership consumption]

CONSTRAINTS:
- Focus on information relevant to technology decision-makers
- Translate technical jargon into business language
- Prioritize strategic and competitive implications
- Maintain factual accuracy from source material""",
            model="gpt-4o",
            handoff_description="Handoff to analysis agent for extracting structured insights from AI news articles."
        )


class ExecutiveWriter:
    """Factory class for creating the Executive Writing Agent."""

    @staticmethod
    def create_agent() -> Agent:
        """
        Create and configure the Executive Writing Agent.

        Returns:
            Agent: Configured writing agent for creating executive-level summaries.

        Raises:
            ValueError: If required environment variables are missing.
        """
        return Agent(
            name="executive_writer",
            instructions="""You are the Executive Writing Agent. Your role is to create polished summaries for technology leadership audiences.

TASK: Write a 500-word markdown-formatted summary of the AI news analysis for technology leaders.

WRITING STYLE:
- Professional, authoritative tone
- Executive-level language (avoid excessive technical jargon)
- Clear, concise sentences
- Strategic focus on business implications
- Engaging but informative

CONTENT STRUCTURE:
1. **Compelling headline** (H1)
2. **Executive summary paragraph** (2-3 sentences capturing the essence)
3. **Main body** (3-4 paragraphs covering key details)
4. **Strategic implications section** (what this means for tech leaders)
5. **Conclusion with forward-looking statement**

MARKDOWN FORMATTING REQUIREMENTS:
- Use H1 for main headline
- Use H2 for section headers if needed
- Use H3 for subsections if needed
- Bold key terms and company names
- Use bullet points for lists when appropriate
- Include italics for emphasis on key concepts
- Ensure proper spacing and readability

CONSTRAINTS:
- Exactly 500 words (+/- 10 words acceptable)
- Web-ready markdown formatting
- Include publication date and source attribution
- Maintain factual accuracy from analysis
- Focus on strategic value for technology executives
- Include a clear call-to-action or key takeaway

QUALITY CHECKS:
- Verify word count
- Ensure markdown syntax is correct
- Confirm executive-appropriate tone
- Validate strategic relevance for tech leaders""",
            model="gpt-4o",
            handoff_description="Handoff to writing agent for creating executive-level AI news summaries."
        )


class WorkflowOrchestrator:
    """Factory class for creating the Workflow Orchestration Agent."""

    @staticmethod
    def create_agent() -> Agent:
        """
        Create and configure the Workflow Orchestration Agent.

        Returns:
            Agent: Configured orchestration agent for managing the workflow.

        Raises:
            ValueError: If required environment variables are missing.
        """
        # Create specialized agents
        research_agent = AINewsResearcher.create_agent()
        analysis_agent = ContentAnalyzer.create_agent()
        writing_agent = ExecutiveWriter.create_agent()

        return Agent(
            name="workflow_orchestrator",
            instructions="""You are the Workflow Orchestration Agent. Your role is to coordinate the multi-agent workflow for AI news summary generation.

TASK: Manage the complete workflow from research to final formatted output.

WORKFLOW SEQUENCE:
1. **Initialize Research Phase**
   - Trigger ai_news_researcher agent
   - Verify research output meets quality standards
   - If insufficient, request re-research with different criteria

2. **Analysis Phase**
   - Pass research results to content_analyzer agent
   - Validate analysis completeness and structure
   - Ensure all required analysis components are present

3. **Writing Phase**
   - Provide analysis output to executive_writer agent
   - Verify final output meets all specifications
   - Check word count, formatting, and tone

4. **Quality Assurance**
   - Validate markdown formatting is web-ready
   - Confirm target audience appropriateness
   - Ensure complete workflow execution

COORDINATION RESPONSIBILITIES:
- Monitor each agent's output quality
- Handle any errors or insufficient outputs
- Maintain workflow state and progress
- Ensure information flows correctly between agents
- Validate final deliverable meets all requirements

ERROR HANDLING:
- If research finds no suitable articles, adjust search criteria
- If analysis is incomplete, request specific missing elements
- If writing doesn't meet specifications, provide specific revision guidance
- Retry failed steps up to 2 times before escalating

FINAL OUTPUT VALIDATION:
- Confirm 500-word target (+/- 10 words)
- Verify markdown syntax correctness
- Validate web-posting readiness
- Ensure technology leader audience appropriateness
- Check source attribution and publication date inclusion

SUCCESS CRITERIA:
- Single, high-quality AI news story identified
- Comprehensive analysis completed
- Professional 500-word summary written
- Web-ready markdown formatting applied
- Technology leader audience focus maintained""",
            model="gpt-4o",
            tools=[
                research_agent.as_tool(
                    tool_name="research_ai_news",
                    tool_description="Find and evaluate the most significant AI news from the last 7 days."
                ),
                analysis_agent.as_tool(
                    tool_name="analyze_content",
                    tool_description="Extract structured insights from AI news articles for executive consumption."
                ),
                writing_agent.as_tool(
                    tool_name="write_executive_summary",
                    tool_description="Create a 500-word markdown-formatted summary for technology leaders."
                ),
            ],
            handoff_description="Coordinates the complete AI news summary workflow from research to publication."
        )


class AINewsSummaryWorkflow:
    """
    Main workflow coordinator for AI news summary generation.
    
    This class orchestrates the entire process of finding, analyzing, and summarizing
    AI news for technology leadership audiences.
    """

    def __init__(self):
        """Initialize the workflow with all required agents."""
        self.orchestrator = WorkflowOrchestrator.create_agent()
        self.output_dir = "output"
        
        # Ensure output directory exists
        os.makedirs(self.output_dir, exist_ok=True)

    async def generate_summary(self, custom_prompt: Optional[str] = None) -> Dict[str, str]:
        """
        Generate a comprehensive AI news summary.

        Args:
            custom_prompt: Optional custom prompt to modify the workflow behavior.

        Returns:
            Dict containing the workflow results with keys:
            - 'summary': The final markdown summary
            - 'output_file': Path to the saved output file
            - 'timestamp': Generation timestamp
            - 'status': Success/failure status

        Raises:
            Exception: If the workflow fails after all retry attempts.
        """
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        
        try:
            # Default prompt for AI news summary generation
            default_prompt = (
                "Please execute the complete AI news summary workflow. "
                "Find the most significant AI news from the last 7 days, "
                "analyze it thoroughly, and create a 500-word executive summary "
                "in markdown format suitable for technology leaders."
            )
            
            prompt = custom_prompt or default_prompt
            
            with trace("AI News Summary Generation"):
                result = await Runner.run(
                    self.orchestrator,
                    input=prompt
                )
            
            # Extract the final summary from the result
            summary_content = result.final_output
            
            # Save the output to a file
            output_filename = f"ai_news_summary_{timestamp}.md"
            output_path = os.path.join(self.output_dir, output_filename)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(summary_content)
            
            return {
                'summary': summary_content,
                'output_file': output_path,
                'timestamp': timestamp,
                'status': 'success'
            }
            
        except Exception as e:
            error_msg = f"Workflow failed: {str(e)}"
            print(f"Error: {error_msg}")
            
            return {
                'summary': "",
                'output_file': "",
                'timestamp': timestamp,
                'status': f'failed: {error_msg}'
            }

    def validate_output(self, summary: str) -> Dict[str, bool]:
        """
        Validate the generated summary against quality criteria.

        Args:
            summary: The generated markdown summary to validate.

        Returns:
            Dict containing validation results for different criteria.

        Raises:
            ValueError: If summary is empty or None.
        """
        if not summary:
            raise ValueError("Summary cannot be empty or None")

        validation_results = {
            'has_markdown_header': summary.strip().startswith('#'),
            'word_count_valid': 450 <= len(summary.split()) <= 550,
            'has_bold_formatting': '**' in summary,
            'has_proper_structure': '##' in summary or '###' in summary,
            'includes_source_attribution': any(
                keyword in summary.lower() 
                for keyword in ['source:', 'published', 'techcrunch', 'venturebeat', 'reuters', 'bloomberg']
            ),
            'executive_language': not any(
                technical_term in summary.lower()
                for technical_term in ['algorithm', 'neural network', 'gradient descent', 'backpropagation']
            )
        }
        
        return validation_results


async def main():
    """
    Main execution function for the AI news summary generation workflow.
    
    Raises:
        Exception: If the workflow execution fails.
    """
    print("🚀 Starting AI News Summary Generation Workflow")
    print("=" * 60)
    
    # Initialize the workflow
    workflow = AINewsSummaryWorkflow()
    
    try:
        # Generate the summary
        result = await workflow.generate_summary()
        
        if result['status'] == 'success':
            print(f"✅ Summary generated successfully!")
            print(f"📁 Output saved to: {result['output_file']}")
            print(f"⏰ Generated at: {result['timestamp']}")
            
            # Validate the output
            validation = workflow.validate_output(result['summary'])
            print("\n📊 Quality Validation Results:")
            for criterion, passed in validation.items():
                status = "✅" if passed else "❌"
                print(f"  {status} {criterion.replace('_', ' ').title()}")
            
            # Display a preview of the summary
            print("\n📄 Summary Preview:")
            print("-" * 40)
            print(result['summary'][:500] + "..." if len(result['summary']) > 500 else result['summary'])
            print("-" * 40)
            
        else:
            print(f"❌ Workflow failed: {result['status']}")
            
    except Exception as e:
        print(f"💥 Fatal error in workflow execution: {str(e)}")
        raise


if __name__ == "__main__":
    asyncio.run(main())

